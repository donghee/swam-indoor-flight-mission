<html lang="en">
  {% include "head.nunjucks" %}
  <body>
    <script src="https://threejs.org/build/three.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
    <script src="https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.5/dat.gui.min.js"></script>
    <div class="site-wrapper">
      {% include "nav.nunjucks" %}
      <div class="site-content">
	<div id="site-container">
	  <div id="gui-container"></div>
	</div>	  
        <div id="timeline-container">
	</div>
      </div>
      {% include "footer.nunjucks" %}
    </div>
    <script>
     // https://slides.com/mgmerino/nodejs-socketio-threejs
     // http://davidscottlyons.com/threejs-intro/#slide-0
     // http://davidscottlyons.com/sketches/2017/03tree/
     // https://www.udacity.com/course/interactive-3d-graphics--cs291

      var controller = new function() {
	  this.id = 'drone #1'
	  this.x = 0.0;
	  this.y = 0.0;
	  this.z = 0.0;
	  this.positionUpdate = function() {
	      // post
	      // save
	      console.log('upload');
	  }
      }
      
      var gui = new dat.GUI();
      var droneOneFolder = gui.addFolder('Drone #1')
      
      droneOneFolder.add(controller, 'id');
      droneOneFolder.add(controller, 'x', 0.0, 3.0);
      droneOneFolder.add(controller, 'y', 0.0, 2.0);
      droneOneFolder.add(controller, 'z', 0.0, 1.0);
      droneOneFolder.add(controller, 'positionUpdate');
      droneOneFolder.open()

      var guiContainer = document.getElementById('gui-container');
      guiContainer.appendChild(gui.domElement);
      
     var scene = new THREE.Scene();
     var camera = new THREE.PerspectiveCamera(25, window.innerWidth / window.innerHeight, 0.1, 100);
     //var camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );

     var renderer = new THREE.WebGLRenderer();
     renderer.setSize(window.innerWidth, window.innerHeight);
     renderer.setClearColor(0xEEEEEE);
     var container = document.getElementById('site-container');
     renderer.setSize( window.innerWidth, window.innerHeight-120 );
     renderer.setClearColor(0xEEEEEE);
     container.appendChild( renderer.domElement );
     // document.body.appendChild( renderer.domElement );

     // axis
     var axes = new THREE.AxesHelper(10);
     scene.add(axes);

     // station
     var geometry = new THREE.CylinderBufferGeometry(0.1, 0.1, 2, 32);
     var material = new THREE.MeshBasicMaterial({color: 0xFE98A0});
     var cube = new THREE.Mesh(geometry, material);
     scene.add(cube);
     cube.position.y = 1

     var cube1 = new THREE.Mesh(geometry, material);
     scene.add(cube1);
     cube1.position.x = 10
     cube1.position.y = 1
     cube1.position.z = 0

     var cube2 = new THREE.Mesh(geometry, material);
     scene.add(cube2);
     cube2.position.x = 10
     cube2.position.y = 1
     cube2.position.z = -6

     var cube3 = new THREE.Mesh(geometry, material);
     scene.add(cube3);
     cube3.position.x = 0
     cube3.position.y = 1
     cube3.position.z = -6

     // loader
     var loader = new THREE.GLTFLoader();

     var duck, chicken;

     // Load a glTF resource
     loader.load(
	   // resource URL
//	   '/Duck.glb',
       '/3dr_arducopter_quad_x.glb',
	   // called when the resource is loaded
	   function ( gltf ) {
         duck = gltf.scene;
         /* Math.PI / 2 */
         duck.rotation.x = Math.PI/2;
		 scene.add( duck );

		 gltf.animations; // Array<THREE.AnimationClip>
		 gltf.scene; // THREE.Scene
		 gltf.scenes; // Array<THREE.Scene>
		 gltf.cameras; // Array<THREE.Camera>
		 gltf.asset; // Object
	   },
	   // called while loading is progressing
	   function ( xhr ) {

		 console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	   },
	   // called when loading has errors
	   function ( error ) {

		 console.log( 'An error happened' );

	   }
     );

     // Load a glTF resource
     loader.load(
	   // resource URL
	   '/Duck.glb',
	   // called when the resource is loaded
	   function ( gltf ) {
         chicken = gltf.scene;
         chicken.scale.x = 0.5;
         chicken.scale.y = 0.5;
         chicken.scale.z = 0.5;

		 scene.add( chicken );

		 gltf.animations; // Array<THREE.AnimationClip>
		 gltf.scene; // THREE.Scene
		 gltf.scenes; // Array<THREE.Scene>
		 gltf.cameras; // Array<THREE.Camera>
		 gltf.asset; // Object
	   },
	   // called while loading is progressing
	   function ( xhr ) {

		 console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );

	   },
	   // called when loading has errors
	   function ( error ) {

		 console.log( 'An error happened' );

	   }
     );
     

     // grid
     var size = 1000;
     var divisions = 1000;

     var gridHelper = new THREE.GridHelper( size, divisions, 0x0000ff, 0x808080 );
     gridHelper.position.y = 0;
     gridHelper.position.x = 0;

     scene.add( gridHelper );

     // Camera	
     //camera.lookAt(new THREE.Vector3(0, 0, 0));
     camera.position.x = 0;
     camera.position.y = 0;
     camera.position.z = 50;

     // Lighting
     var ambient = new THREE.AmbientLight(0x808080);
     scene.add(ambient);

     var spotLight = new THREE.SpotLight(0xffffff);
     spotLight.position.set(10, 20, 20);
     spotLight.shadow.camera.near = 10;
     spotLight.shadow.camera.far = 40;
     spotLight.castShadow = true;
     scene.add(spotLight);

     // controls
     var controls;
     controls = new THREE.OrbitControls( camera, renderer.domElement );
     ////controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)
     controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
     controls.dampingFactor = 0.25;
     controls.screenSpacePanning = false;
     controls.minDistance = 10;
     controls.maxDistance = 50;
     controls.maxPolarAngle = Math.PI / 2;


     // lines

     // geometry
     var geometry = new THREE.BufferGeometry();
     var MAX_POINTS = 10000;
     var positions = new Float32Array(MAX_POINTS * 3);
     geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));

     // material
     var material = new THREE.LineBasicMaterial({
       color: 0xFE98A0,
       linewidth: 3
     });

     // line
     var count = 0;
     var line = new THREE.Line(geometry, material);
     scene.add(line);

     function updateLine(x,y,z) {
       //positions[count * 3 - 3] = x;
       //positions[count * 3 - 2] = y;
       //positions[count * 3 - 1] = z;
       line.geometry.attributes.position.needsUpdate = true;
     }

     function addPoint(x, y, z) {
     // add point
       /* console.log("point nr " + count + ": " + x + " " + y + " " + z); */
       positions[count * 3 + 0] = x;
       positions[count * 3 + 1] = y;
       positions[count * 3 + 2] = z;
       count++;
       line.geometry.setDrawRange(0, count);
       /* console.log(positions) */
     }


     var animate = function() {
	   requestAnimationFrame( animate );
	   // controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true

	   //var time = - performance.now() * 0.0003;
	   //camera.position.x = 10 * Math.cos( time );
	   //camera.position.z = 10 * Math.sin( time );
	   //camera.lookAt( scene.position );

	 // duck.position.x = controller.x*3;
	 // duck.position.y = controller.z*3;	 	 
	 // duck.position.z = -controller.y*3;
	 
	   renderer.render( scene, camera )
     }

     animate();

     var socket = io.connect();
     socket.on('pozyx_pos', function (data) {

       if (duck){
         duck.position.x  = data['26478'].coordinates.x / 1000 *2
         duck.position.z  = data['26478'].coordinates.y / 1000 *2
         duck.position.y  = data['26478'].coordinates.z / 1000 / 10

         duck.rotation.z  = data['26478'].orientation.yaw
         addPoint(duck.position.x, duck.position.y, duck.position.z);
       }

       if (chicken){
         chicken.position.x  = data['26394'].coordinates.x / 1000 *2
         chicken.position.z  = data['26394'].coordinates.y / 1000 *2
         chicken.position.y  = data['26394'].coordinates.z / 1000 / 10

         duck.rotation.z  = data['26394'].orientation.yaw
       }

     });

    </script>
  </body>
</html>
